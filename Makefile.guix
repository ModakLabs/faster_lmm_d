# GNU Guix makefile
#
# To build faster_lmm_d on GNU Guix:
#
#   make -f Makefile.guix [CUDA=1] [VALIDATE=1] [debug|release|check]
#
# run with
#
#   ./build/faster_lmm_d

# The following two are modified by the Guix package:
D_COMPILER=ldc2
# LDC_LIB_PATH=$(HOME)/.guix-profile/lib
LDC_LIB_PATH=~/opt/ldc2-1.1.0-linux-x86_64/lib

ifdef CUDA
  CUDA_LIB_PATH=/usr/local/cuda-7.0/lib64
endif

DUB_INCLUDE = \
-I~/.dub/packages/dstats-1.0.3/dstats/source/ \
-I~/.dub/packages/gsl-0.1.8/gsl/source/ \
-I~/.dub/packages/cblas-1.0.0/cblas/source/ \
-I~/.dub/packages/dyaml-0.5.3/dyaml/source/ \
-I~/.dub/packages/tinyendian-0.1.2/tinyendian/source/ \
-I~/.dub/packages/resusage-0.2.4/resusage/source/

DUB_LIBS = \
$(HOME)/.dub/packages/dstats-1.0.3/dstats/libdstats.a \
$(HOME)/.dub/packages/dyaml-0.5.3/dyaml/libdyaml.a \
$(HOME)/.dub/packages/gsl-0.1.8/gsl/libgsl.a \
$(HOME)/.dub/packages/lapack-0.1.2/lapack/liblapack.a \
$(HOME)/.dub/packages/tinyendian-0.1.2/tinyendian/libtinyendian.a \
$(HOME)/.dub/packages/resusage-0.2.4/resusage/lib/libresusage.a

ifdef CUDA
  DUB_INCLUDE += -I~/.dub/packages/cuda_d-0.1.0/cuda_d/source/
  DUB_LIBS += $(HOME)/.dub/packages/cuda_d-0.1.0/cuda_d/libcuda_d.a
endif

DFLAGS = -wi -I./source $(DUB_INCLUDE)
DLIBS  = $(LDC_LIB_PATH)/libphobos2-ldc.a $(LDC_LIB_PATH)/libdruntime-ldc.a $(DUB_LIBS)
DLIBS_DEBUG = $(LDC_LIB_PATH)/libphobos2-ldc-debug.a $(LDC_LIB_PATH)/libdruntime-ldc-debug.a $(DUB_LIBS)
RPATH  =
LIBS   = -L-L$(LDC_LIB_PATH) -L-lgsl -L-lopenblas -L-llapacke
SRC    = $(wildcard source/faster_lmm_d/*.d)
OBJ    = $(SRC:.d=.o)
OUT    = build/faster_lmm_d

ifdef CUDA
  LIBS += -L-L/usr/local/cuda-7.0/lib64 -L=-lcublas -L=-lcudart
  # LIBS += $(CUDA_LIB_PATH)/libcublas_static.a $(CUDA_LIB_PATH)/libcudart_static.a /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/x86_64-linux-gnu/crt1.o
  # LIBS += $(CUDA_LIB_PATH)/libcublas_static.a $(CUDA_LIB_PATH)/libcudart_static.a /usr/lib/x86_64-linux-gnu/crti.o /usr/lib/x86_64-linux-gnu/crt1.o
endif

# The Guix targets resolve the RPATH automatically
guix:        DFLAGS += -O -g -inline

guix-debug:  DFLAGS += -O0 -g -d-debug -unittest

# The development options are run from ~/.guix-profile and need to inject the RPATH
debug:       DFLAGS += -O0 -g -d-debug $(RPATH) -link-debuglib

release:     DFLAGS += -O -release $(RPATH)

profile:     DFLAGS += -fprofile-instr-generate=fast_lmm_d-profiler.out $(RPATH)

getIR: DFLAGS += -output-ll

getBC: DFLAGS += -output-bc

gperf: LIBS += -L=-lprofiler

gperf: DUB_INCLUDE += -I~/.dub/packages/gperftools_d-0.1.0/gperftools_d/source/

gperf: DUB_LIBS += $(HOME)/.dub/packages/gperftools_d-0.1.0/gperftools_d/libgperftools_d.a

guix release:             LIBS += $(DLIBS)

guix-debug debug profile: LIBS += $(DLIBS_DEBUG)

.PHONY: all guix guix-debug debug release profile clean cleanIR cleanBC test gperf

all: debug

build-setup:
	mkdir -p build/

guix guix-debug default debug release profile getIR getBC gperf: $(OUT)

ifdef CUDA
  DFLAGS += -d-version=CUDA
endif
ifdef VALIDATE
  DFLAGS += -d-version=VALIDATE
endif

# ---- Compile step
%.o: %.d
	$(D_COMPILER) $(DFLAGS) -c $< -od=$(dir $@)

# ---- Link step
$(OUT): build-setup $(OBJ)
	$(D_COMPILER) $(DFLAGS) -of=build/faster_lmm_d $(OBJ) $(LIBS)

test:
	./run_tests.sh

check:  test  # alias

debug-strip: debug
	objcopy --only-keep-debug build/faster_lmm_d faster_lmm_d.debug
	objcopy --strip-debug build/faster_lmm_d
	objcopy --add-gnu-debuglink=faster_lmm_d.debug build/faster_lmm_d
	mv faster_lmm_d.debug build/

# ---- Get profiler info, see https://wiki.dlang.org/LDC_LLVM_profiling_instrumentation
run-profiler: profile test
	ldc-profdata merge fast_lmm_d-profiler.out -output faster_lmm_d.profdata

install:
	install -m 0755 build/faster_lmm_d $(prefix)/bin

run-gperf: gperf
	$ CPUPROFILE=./prof.out ./run_tests.sh
	pprof --gv build/faster_lmm_d ./prof.out

clean:
	rm -rf build/*
	rm -f $(OBJ) $(OUT) trace.{def,log}

cleanIR:
	rm -f $(IR) trace.{def,log}

cleanBC:
	rm -f $(BC) trace.{def,log}
